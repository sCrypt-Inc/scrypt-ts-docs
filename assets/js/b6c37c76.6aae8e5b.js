"use strict";(self.webpackChunkscrypt_docs=self.webpackChunkscrypt_docs||[]).push([[9335],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),p=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=p(e.components);return o.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),y=r,m=u["".concat(i,".").concat(y)]||u[y]||d[y]||a;return n?o.createElement(m,c(c({ref:t},s),{},{components:n})):o.createElement(m,c({ref:t},s))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var p=2;p<a;p++)c[p]=n[p];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4149:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:3},c="Deploy Using sCrypt CLI",l={unversionedId:"how-to-deploy-and-call-a-contract/deploy-w-cli",id:"how-to-deploy-and-call-a-contract/deploy-w-cli",title:"Deploy Using sCrypt CLI",description:"Introduction",source:"@site/docs/how-to-deploy-and-call-a-contract/deploy-w-cli.md",sourceDirName:"how-to-deploy-and-call-a-contract",slug:"/how-to-deploy-and-call-a-contract/deploy-w-cli",permalink:"/docs/how-to-deploy-and-call-a-contract/deploy-w-cli",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"How to Customize a Contract Tx",permalink:"/docs/how-to-deploy-and-call-a-contract/how-to-customize-a-contract-tx"},next:{title:"How to Debug a Contract",permalink:"/docs/how-to-debug-a-contract"}},i={},p=[{value:"Introduction",id:"introduction",level:2}],s={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"deploy-using-scrypt-cli"},"Deploy Using sCrypt CLI"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy")," command allows you to deploy an instance of a smart contract to the blockchain. You can simply run the following command in the root of an sCrypt project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"scrypt deploy\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"scrypt d\n")),(0,r.kt)("p",null,"By default, the CLI tool will run the deployment script named ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy.ts")," located in the root of the project. You can also specify a different deployment script using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--file")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"-f")," option."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"scrypt d -f myCustomDeploy.ts\n")),(0,r.kt)("p",null,"If the project was created using sCrypt CLI, it will already have a ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy.ts")," file present (except for library projects). If not, the ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy")," command will generate a template."),(0,r.kt)("p",null,"Here's an example of such a deployment file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Demoproject } from './src/contracts/demoproject'\nimport {\n    bsv,\n    TestWallet,\n    DefaultProvider,\n    sha256,\n    toByteString,\n} from 'scrypt-ts'\n\nimport * as dotenv from 'dotenv'\n\n// Load the .env file\ndotenv.config()\n\n// Read the private key from the .env file.\n// The default private key inside the .env file is meant to be used for the Bitcoin testnet.\n// See https://scrypt.io/docs/bitcoin-basics/bsv/#private-keys\nconst privateKey = bsv.PrivateKey.fromWIF(process.env.PRIVATE_KEY)\n\n// Prepare signer. \n// See https://scrypt.io/docs/how-to-deploy-and-call-a-contract/#prepare-a-signer-and-provider\nconst signer = new TestWallet(privateKey, new DefaultProvider())\n\nasync function main() {\n    // Compile the smart contract.\n    await Demoproject.compile()\n\n    // The amount of satoshis locked in the smart contract:\n    const amount = 100\n\n    // Instantiate the smart contract and pass constructor parameters.\n    const instance = new Demoproject(\n        sha256(toByteString('hello world', true))\n    )\n\n    // Connect to a signer.\n    await instance.connect(signer)\n\n    // Contract deployment.\n    const deployTx = await instance.deploy(amount)\n    console.log('Demoproject contract deployed: ', deployTx.id)\n}\n\nmain()\n")))}d.isMDXComponent=!0}}]);