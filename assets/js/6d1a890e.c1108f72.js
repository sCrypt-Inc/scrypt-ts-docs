"use strict";(self.webpackChunkscrypt_docs=self.webpackChunkscrypt_docs||[]).push([[9442],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(r),h=a,g=u["".concat(p,".").concat(h)]||u[h]||l[h]||i;return r?n.createElement(g,s(s({ref:t},d),{},{components:r})):n.createElement(g,s({ref:t},d))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5869:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:8},s="Use Code Separators",o={unversionedId:"advanced/codeseparator",id:"advanced/codeseparator",title:"Use Code Separators",description:"How Code Separators Work",source:"@site/docs/advanced/codeseparator.md",sourceDirName:"advanced",slug:"/advanced/codeseparator",permalink:"/advanced/codeseparator",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Sighash Types",permalink:"/advanced/sighash-type"},next:{title:"Tutorials",permalink:"/category/tutorials"}},p={},c=[{value:"How Code Separators Work",id:"how-code-separators-work",level:2},{value:"How to Insert Code Separators",id:"how-to-insert-code-separators",level:2},{value:"Generate a Signature",id:"generate-a-signature",level:3}],d={toc:c};function l(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"use-code-separators"},"Use Code Separators"),(0,a.kt)("h2",{id:"how-code-separators-work"},"How Code Separators Work"),(0,a.kt)("p",null,"In a Bitcoin signature, what is signed is ",(0,a.kt)("a",{parentName:"p",href:"/how-to-write-a-contract/scriptcontext#serialization"},"serialized ScriptContext"),", whose format is as follows:\n",(0,a.kt)("img",{src:r(7205).Z,width:"1100",height:"694"})),(0,a.kt)("p",null,"Part 5, ",(0,a.kt)("inlineCode",{parentName:"p"},"scriptCode"),", usually contains the entire smart contract, i.e., locking script. The only exception is when there is ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.bitcoinsv.io/index.php/OP_CODESEPARATOR"},"OP_CODESEPARATOR")," (OCS) in it. When the signature is being verified by ",(0,a.kt)("a",{parentName:"p",href:"/how-to-write-a-contract/built-ins#checksig"},"checkSig"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"scriptCode")," is the locking script but removing everything up to and including the last executed OCS."),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(1271).Z,width:"3281",height:"1242"})),(0,a.kt)("h2",{id:"how-to-insert-code-separators"},"How to Insert Code Separators"),(0,a.kt)("p",null,"To insert an ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.bitcoinsv.io/index.php/OP_CODESEPARATOR"},(0,a.kt)("inlineCode",{parentName:"a"},"OP_CODESEPARATOR"))," in place, simply invoke ",(0,a.kt)("a",{parentName:"p",href:"/how-to-write-a-contract/built-ins#insertcodeseparator"},"insertCodeSeparator()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export class CodeSeparator extends SmartContract {\n\n    @prop()\n    readonly addresses: FixedArray<PubKeyHash, 3>;\n\n    constructor(addresses: FixedArray<PubKeyHash, 3>) {\n        super(...arguments);\n        this.addresses = addresses;\n    }\n\n    @method()\n    public unlock(sigs: FixedArray<Sig, 3>, pubKeys: FixedArray<PubKey, 3>) {\n        assert(hash160(pubKeys[0]) == this.addresses[0]);\n        this.insertCodeSeparator()\n        assert(this.checkSig(sigs[0], pubKeys[0]));\n\n        this.insertCodeSeparator()\n        assert(hash160(pubKeys[1]) == this.addresses[1]);\n        assert(this.checkSig(sigs[1], pubKeys[1]));\n\n        this.insertCodeSeparator()\n        assert(hash160(pubKeys[2]) == this.addresses[2]);\n        assert(this.checkSig(sigs[2], pubKeys[2]));\n    }\n\n}\n")),(0,a.kt)("p",null,"In the above example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"unlock")," method calls ",(0,a.kt)("inlineCode",{parentName:"p"},"insertCodeSeparator"),". Each invocation of ",(0,a.kt)("inlineCode",{parentName:"p"},"checkSig")," will use the code below the most recent invocation of ",(0,a.kt)("inlineCode",{parentName:"p"},"insertCodeSeparator")," in the signature verification process. Multiple ",(0,a.kt)("inlineCode",{parentName:"p"},"OP_CODESEPARATOR"),"s can be inserted, each affecting the ",(0,a.kt)("inlineCode",{parentName:"p"},"checkSig")," right after it."),(0,a.kt)("h3",{id:"generate-a-signature"},"Generate a Signature"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"OP_CODESEPARATOR")," is used, we need to change the way to get signatures.\nThis is because the signature so far signes the entire locking script, instead of a subscript with everything before OCS removed.\nWe can achieve this by passing the index of ",(0,a.kt)("inlineCode",{parentName:"p"},"insertCodeSeparator")," as a method call parameter, to specify which ",(0,a.kt)("inlineCode",{parentName:"p"},"OP_CODESEPARATOR")," divides the locking script.\nLet's take a look at an example for the smart contract above:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Create array of signature options, each for a separate public key.\nconst pubKeyOrAddrToSign: SignaturesOption = []\nfor (let i = 0; i < publicKeys.length; i++) {\n    const pubKey = publicKeys[i]\n    pubKeyOrAddrToSign.push({\n        pubKeyOrAddr: pubKey, // The public key for which a signature will be created.\n        csIdx: i              // Index of the `insertCodeSeparator` call, starting from 0\n                              // I.e., if csIdx = 1, then only the code starting from and including\n                              // the second occurence of `insertCodeSeparator` will be signed.\n    })\n}\nconst { tx: callTx, atInputIndex } = await demo.methods.unlock(\n    (sigResps) => {\n      // Inside the signature responses we can observe,\n      // which instance of the `insertCodeSeparator` the signature\n      // takes into account:\n      console.log(sigResps)\n      return findSigs(sigResps, publicKeys)\n    },\n    publicKeys.map((publicKey) => PubKey(toHex(publicKey))) as FixedArray<PubKey, 3>,\n    {\n        fromUTXO: dummyUTXO,\n        pubKeyOrAddrToSign\n    } as MethodCallOptions<CodeSeparator>\n)\nlet result = callTx.verifyScript(atInputIndex)\n")))}l.isMDXComponent=!0},1271:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/opcs-dd8e4abeed55e03ecf3605a1eabdd390.png"},7205:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/sighashpreimage-c14297b9c10c3ba72b8f822d1e472311.png"}}]);