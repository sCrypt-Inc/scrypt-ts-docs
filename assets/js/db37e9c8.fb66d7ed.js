"use strict";(self.webpackChunkscrypt_docs=self.webpackChunkscrypt_docs||[]).push([[8567],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=r.createContext({}),l=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=l(t.components);return r.createElement(c.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,c=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),d=l(n),h=a,f=d["".concat(c,".").concat(h)]||d[h]||p[h]||o;return n?r.createElement(f,i(i({ref:e},u),{},{components:n})):r.createElement(f,i({ref:e},u))}));function h(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5937:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={title:"Transfer Existing NFT to a Smart Contract",sidebar_position:1},i=void 0,s={unversionedId:"tokens/nft/existing",id:"tokens/nft/existing",title:"Transfer Existing NFT to a Smart Contract",description:"Suppose you would like to transfer an existing NFT that was already inscribed in the past, which is typically locked using a P2PKH lock.",source:"@site/docs/tokens/nft/existing.md",sourceDirName:"tokens/nft",slug:"/tokens/nft/existing",permalink:"/tokens/nft/existing",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Transfer Existing NFT to a Smart Contract",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Non Funglible Tokens - NFTs",permalink:"/tokens/nft/"},next:{title:"Funglible Tokens - FTs",permalink:"/tokens/ft/"}},c={},l=[],u={toc:l};function p(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Suppose you would like to transfer an existing NFT that was already inscribed in the past, which is typically locked using a ",(0,a.kt)("inlineCode",{parentName:"p"},"P2PKH")," lock.\nYou can fetch all the needed data for the transfer by either using ",(0,a.kt)("inlineCode",{parentName:"p"},"fromUTXO")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"getLatestInstance"),". The former takes the deployed NFT's current UTXO, while the latter takes the NFT's ",(0,a.kt)("a",{parentName:"p",href:"https://docs.1satordinals.com/readme/terms#origin"},"origin"),"."),(0,a.kt)("p",null,"If the deployed NFT is locked using a regular ",(0,a.kt)("inlineCode",{parentName:"p"},"P2PKH")," you may unlock it like the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const outpoint = '036718e5c603169b9981a55f276adfa7b5d024616ac95e048b05a81258ea2388_0';\n\n// Create a P2PKH object from a UTXO\nconst utxo: UTXO = OneSatApis.fetchUTXOByOutpoint(outpoint);\nconst p2pkh = OrdiNFTP2PKH.fromUTXO(utxo);\n// Alternatively, create a P2PKH from an origin\nconst p2pkh = await OrdiNFTP2PKH.getLatestInstance(outpoint);\n\n// Construct recipient smart contract\nconst message = toByteString('super secret', true);\nconst hash = sha256(message);\nconst recipient = new HashLockNFT(hash);\nawait recipient.connect(getDefaultSigner());\n\n// Unlock deployed NFT and send it to the recipient hash lock contract\nawait p2pkh.connect(getDefaultSigner());\n\nconst { tx: transferTx } = await p2pkh.methods.unlock(\n  (sigResps) => findSig(sigResps, `yourPubKey`),\n  PubKey(`yourPubKey`.toByteString()),\n  {\n    transfer: recipient,\n    pubKeyOrAddrToSign: `yourPubKey`,\n  } as OrdiMethodCallOptions<OrdiNFTP2PKH>\n);\n\nconsole.log(\"Transferred NFT: \", transferTx.id);\n")),(0,a.kt)("p",null,"Alternatively, if the NFT is locked using a smart contract, i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"HashLockNFT"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"HashLockNFT.loadArtifact();\n\n// Retrieve `HashLockNFT` instance holding the NFT\nconst nft = await HashLockNFT.getLatestInstance(outpoint);\nawait nft.connect(getDefaultSigner());\n\nconst hash = sha256(toByteString('next super secret', true));\nconst recipient = new HashLockNFT(hash);\nawait recipient.connect(getDefaultSigner());\n\n// Send NFT to recipient\nconst { tx: transferTx } = await nft.methods.unlock(\n  toByteString('super secret', true),\n  {\n    transfer: recipient,\n  }\n);\n\nconsole.log(\"Transferred NFT: \", transferTx.id);\n")),(0,a.kt)("h1",{id:"buildstateoutputft"},(0,a.kt)("inlineCode",{parentName:"h1"},"buildStateOutputFT")),(0,a.kt)("p",null,"Any instance of an ",(0,a.kt)("inlineCode",{parentName:"p"},"OrdinalNFT")," contains the ",(0,a.kt)("inlineCode",{parentName:"p"},"buildStateOutputNFT")," method. In contrast to the regular ",(0,a.kt)("inlineCode",{parentName:"p"},"buildStateOutput")," method, this method also removes any inscription data that might be included in the smart contract's locking script. This is necessary because, within a stateful smart contract, we don't want the next iteration to re-inscribe the ordinal. Additionally, the ",(0,a.kt)("inlineCode",{parentName:"p"},"buildStateOutputNFT")," method doesn't require a satoshi amount argument, as the amount is always 1 satoshi."),(0,a.kt)("p",null,"Below is an example of an ordinal counter contract:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class CounterNFT extends OrdinalNFT {\n\n    @prop(true)\n    counter: bigint\n\n    constructor(counter: bigint) {\n        super()\n        this.init(counter)\n        this.counter = counter\n    }\n\n    @method()\n    public incOnchain() {\n        this.counter++\n        \n        ...\n\n        let outputs = this.buildStateOutputNFT()  // Does not include inscription in the next iteration.\n        outputs += this.buildChangeOutput()\n        assert(\n            this.ctx.hashOutputs == hash256(outputs),\n            'hashOutputs check failed'\n        )\n    }\n\n}\n")),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/sCrypt-Inc/scrypt-ord/blob/master/tests/contracts/counterNFT.ts"},"complete code on GitHub"),"."))}p.isMDXComponent=!0}}]);