"use strict";(self.webpackChunkscrypt_docs=self.webpackChunkscrypt_docs||[]).push([[8567],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=l(n),d=a,g=f["".concat(c,".").concat(d)]||f[d]||u[d]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5937:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={title:"Transfer Existing NFT to a Smart Contract",sidebar_position:1},i=void 0,s={unversionedId:"tokens/nft/existing",id:"tokens/nft/existing",title:"Transfer Existing NFT to a Smart Contract",description:"Suppose you would like to transfer an existing NFT that was already inscribed in the past, which is typically locked using a P2PKH lock.",source:"@site/docs/tokens/nft/existing.md",sourceDirName:"tokens/nft",slug:"/tokens/nft/existing",permalink:"/tokens/nft/existing",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Transfer Existing NFT to a Smart Contract",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Non Funglible Tokens - NFTs",permalink:"/tokens/nft/"},next:{title:"buildStateOutputNFT",permalink:"/tokens/nft/buildstateoutputnft"}},c={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Suppose you would like to transfer an existing NFT that was already inscribed in the past, which is typically locked using a ",(0,a.kt)("inlineCode",{parentName:"p"},"P2PKH")," lock.\nYou can fetch all the needed data for the transfer by either using ",(0,a.kt)("inlineCode",{parentName:"p"},"fromUTXO")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"getLatestInstance"),". The former takes the deployed NFT's current UTXO, while the latter takes the NFT's ",(0,a.kt)("a",{parentName:"p",href:"https://docs.1satordinals.com/readme/terms#origin"},"origin"),"."),(0,a.kt)("p",null,"If the deployed NFT is locked using a regular ",(0,a.kt)("inlineCode",{parentName:"p"},"P2PKH")," you may unlock it like the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const outpoint = '036718e5c603169b9981a55f276adfa7b5d024616ac95e048b05a81258ea2388_0';\n\n// Create a P2PKH object from a UTXO\nconst utxo: UTXO = OneSatApis.fetchUTXOByOutpoint(outpoint);\nconst p2pkh = OrdNFTP2PKH.fromUTXO(utxo);\n// Alternatively, create a P2PKH from an origin\nconst p2pkh = await OrdNFTP2PKH.getLatestInstance(outpoint);\n\n// Construct recipient smart contract\nconst message = toByteString('super secret', true);\nconst hash = sha256(message);\nconst recipient = new HashPuzzleNFT(hash);\nawait recipient.connect(getDefaultSigner());\n\n// Unlock deployed NFT and send it to the recipient hash puzzle contract\nawait p2pkh.connect(getDefaultSigner());\n\nconst { tx: transferTx } = await p2pkh.methods.unlock(\n  (sigResps) => findSig(sigResps, `yourPubKey`),\n  PubKey(`yourPubKey`.toByteString()),\n  {\n    transfer: recipient,\n    pubKeyOrAddrToSign: `yourPubKey`,\n  } as MethodCallOptions<OrdNFTP2PKH>\n);\n\nconsole.log(\"Transferred NFT: \", transferTx.id);\n")),(0,a.kt)("p",null,"Alternatively, if the NFT is locked using a smart contract, i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"HashPuzzleNFT"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"HashPuzzleNFT.loadArtifact();\n\n// Retrieve `HashPuzzleNFT` instance holding the NFT\nconst nft = await HashPuzzleNFT.getLatestInstance(outpoint);\nawait nft.connect(getDefaultSigner());\n\nconst hash = sha256(toByteString('next super secret', true));\nconst recipient = new HashPuzzleNFT(hash);\nawait recipient.connect(getDefaultSigner());\n\n// Send NFT to recipient\nconst { tx: transferTx } = await nft.methods.unlock(\n  toByteString('super secret', true),\n  {\n    transfer: recipient,\n  }\n);\n\nconsole.log(\"Transferred NFT: \", transferTx.id);\n")))}u.isMDXComponent=!0}}]);