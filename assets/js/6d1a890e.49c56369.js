"use strict";(self.webpackChunkscrypt_docs=self.webpackChunkscrypt_docs||[]).push([[9442],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,g=u["".concat(p,".").concat(h)]||u[h]||l[h]||i;return n?r.createElement(g,o(o({ref:t},d),{},{components:n})):r.createElement(g,o({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5869:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:5},o="Use Code Separators",s={unversionedId:"advanced/codeseparator",id:"advanced/codeseparator",title:"Use Code Separators",description:"How Code Separators Work",source:"@site/docs/advanced/codeseparator.md",sourceDirName:"advanced",slug:"/advanced/codeseparator",permalink:"/advanced/codeseparator",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Use Script inside sCrypt",permalink:"/advanced/inline-asm"},next:{title:"How to Add a Provider",permalink:"/advanced/how-to-add-a-provider"}},p={},c=[{value:"How Code Separators Work",id:"how-code-separators-work",level:2},{value:"How to Insert Code Separators",id:"how-to-insert-code-separators",level:2},{value:"Generate a Signature",id:"generate-a-signature",level:3}],d={toc:c};function l(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"use-code-separators"},"Use Code Separators"),(0,a.kt)("h2",{id:"how-code-separators-work"},"How Code Separators Work"),(0,a.kt)("p",null,"In a Bitcoin signature, what is signed is ",(0,a.kt)("a",{parentName:"p",href:"/how-to-write-a-contract/scriptcontext#serialization"},"serialized ScriptContext"),", whose format is as follows:\n",(0,a.kt)("img",{src:n(7205).Z,width:"1100",height:"694"})),(0,a.kt)("p",null,"Part 5, ",(0,a.kt)("inlineCode",{parentName:"p"},"scriptCode"),", usually contains the entire smart contract, i.e., locking script. The only exception is when there is ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.bitcoinsv.io/index.php/OP_CODESEPARATOR"},"OP_CODESEPARATOR")," (OCS) in it. When the signature is being verified by ",(0,a.kt)("a",{parentName:"p",href:"/how-to-write-a-contract/built-ins#checksig"},"checkSig"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"scriptCode")," is the locking script but removing everything up to and including the last executed OCS."),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(1271).Z,width:"3281",height:"1242"})),(0,a.kt)("p",null,"If multiple instances of ",(0,a.kt)("inlineCode",{parentName:"p"},"OP_CODESEPARATOR")," are present, a subsequent ",(0,a.kt)("inlineCode",{parentName:"p"},"checkSig")," will only use the part of the locking script after ",(0,a.kt)("strong",{parentName:"p"},"the most recent")," occurrence of ",(0,a.kt)("inlineCode",{parentName:"p"},"OP_CODESEPARATOR")," as the ",(0,a.kt)("inlineCode",{parentName:"p"},"scriptCode"),"."),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(6075).Z,width:"1058",height:"422"})),(0,a.kt)("h2",{id:"how-to-insert-code-separators"},"How to Insert Code Separators"),(0,a.kt)("p",null,"To insert an ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.bitcoinsv.io/index.php/OP_CODESEPARATOR"},(0,a.kt)("inlineCode",{parentName:"a"},"OP_CODESEPARATOR"))," in place, simply invoke ",(0,a.kt)("a",{parentName:"p",href:"/how-to-write-a-contract/built-ins#insertcodeseparator"},"insertCodeSeparator()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export class CodeSeparator extends SmartContract {\n\n    @prop()\n    readonly addresses: FixedArray<Addr, 3>;\n\n    constructor(addresses: FixedArray<Addr, 3>) {\n        super(...arguments);\n        this.addresses = addresses;\n    }\n\n    @method()\n    public unlock(sigs: FixedArray<Sig, 3>, pubKeys: FixedArray<PubKey, 3>) {\n        assert(pubKey2Addr(pubKeys[0]) == this.addresses[0]);\n        this.insertCodeSeparator()\n        assert(this.checkSig(sigs[0], pubKeys[0]));\n\n        this.insertCodeSeparator()\n        assert(pubKey2Addr(pubKeys[1]) == this.addresses[1]);\n        assert(this.checkSig(sigs[1], pubKeys[1]));\n\n        this.insertCodeSeparator()\n        assert(pubKey2Addr(pubKeys[2]) == this.addresses[2]);\n        assert(this.checkSig(sigs[2], pubKeys[2]));\n    }\n\n}\n")),(0,a.kt)("p",null,"In the above example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"unlock")," method calls ",(0,a.kt)("inlineCode",{parentName:"p"},"insertCodeSeparator"),". Each invocation of ",(0,a.kt)("inlineCode",{parentName:"p"},"checkSig")," will use the code below the most recent invocation of ",(0,a.kt)("inlineCode",{parentName:"p"},"insertCodeSeparator")," in the signature verification process. Multiple ",(0,a.kt)("inlineCode",{parentName:"p"},"OP_CODESEPARATOR"),"s can be inserted, each affecting the ",(0,a.kt)("inlineCode",{parentName:"p"},"checkSig")," right after it."),(0,a.kt)("h3",{id:"generate-a-signature"},"Generate a Signature"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"OP_CODESEPARATOR")," is used, we need to change the way to get signatures.\nThis is because conventionally, the signature covers the entire locking script, instead of a subscript with everything before OCS removed.\nWe can achieve this by passing the index of ",(0,a.kt)("inlineCode",{parentName:"p"},"insertCodeSeparator")," as a method call parameter, to specify which ",(0,a.kt)("inlineCode",{parentName:"p"},"OP_CODESEPARATOR")," divides the locking script.\nLet's take a look at an example for the smart contract above:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Create array of signature options, each for a separate public key.\nconst pubKeyOrAddrToSign: SignaturesOption = []\nfor (let i = 0; i < publicKeys.length; i++) {\n    const pubKey = publicKeys[i]\n    pubKeyOrAddrToSign.push({\n        pubKeyOrAddr: pubKey, // The public key for which a signature will be created.\n        csIdx: i              // Index of the `insertCodeSeparator` call, starting from 0\n                              // I.e., if csIdx = 1, then only the code starting from and including\n                              // the second occurence of `insertCodeSeparator` will be signed.\n    })\n}\nconst callContract = async () => await demo.methods.unlock(\n    (sigResps) => {\n      // Inside the signature responses we can observe,\n      // which instance of the `insertCodeSeparator` the signature\n      // takes into account:\n      console.log(sigResps)\n      return findSigs(sigResps, publicKeys)\n    },\n    publicKeys.map((publicKey) => PubKey(toHex(publicKey))) as FixedArray<PubKey, 3>,\n    {\n        pubKeyOrAddrToSign\n    } as MethodCallOptions<CodeSeparator>\n)\nexpect(callContract()).not.throw\n")))}l.isMDXComponent=!0},1271:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/opcs-dd8e4abeed55e03ecf3605a1eabdd390.png"},6075:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/opcs_mul-635e85ff7d33d404d56a10bbd426c89c.jpg"},7205:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/sighashpreimage-c14297b9c10c3ba72b8f822d1e472311.png"}}]);