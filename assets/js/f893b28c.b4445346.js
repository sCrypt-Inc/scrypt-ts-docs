"use strict";(self.webpackChunkscrypt_ts_docs=self.webpackChunkscrypt_ts_docs||[]).push([[292],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),c=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=c(t.components);return a.createElement(s.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(h,i(i({ref:e},u),{},{components:n})):a.createElement(h,i({ref:e},u))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4297:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:10},i="How to Customize a Contract Tx",l={unversionedId:"how-to-customize-a-contract-tx",id:"how-to-customize-a-contract-tx",title:"How to Customize a Contract Tx",description:"Deployment Tx",source:"@site/docs/how-to-customize-a-contract-tx.md",sourceDirName:".",slug:"/how-to-customize-a-contract-tx",permalink:"/how-to-customize-a-contract-tx",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"How to Publish a Contract to NPM",permalink:"/how-to-publish-a-contract"},next:{title:"How to Verify a Contract",permalink:"/how-to-verify-a-contract"}},s={},c=[{value:"Deployment Tx",id:"deployment-tx",level:2},{value:"Default",id:"default",level:3},{value:"Customize",id:"customize",level:3},{value:"Call Tx",id:"call-tx",level:2},{value:"Default",id:"default-1",level:3},{value:"Customize",id:"customize-1",level:3},{value:"Notes",id:"notes",level:2}],u={toc:c};function p(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-customize-a-contract-tx"},"How to Customize a Contract Tx"),(0,r.kt)("h2",{id:"deployment-tx"},"Deployment Tx"),(0,r.kt)("h3",{id:"default"},"Default"),(0,r.kt)("p",null,"For contract deployment, the default tx builder creates a transaction with the following structure:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Inputs:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"[0\u2026]",": One or more ",(0,r.kt)("a",{parentName:"li",href:"https://learnmeabitcoin.com/technical/p2pkh"},"P2PKH")," inputs for paying transaction fees."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Outputs:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"[0]",": The output containing the contract."),(0,r.kt)("li",{parentName:"ul"},"[1]",": A P2PKH change output if needed.")))),(0,r.kt)("p",null,"Numbers in [] represent index, starting from 0."),(0,r.kt)("h3",{id:"customize"},"Customize"),(0,r.kt)("p",null,"You can customize a contract's deployment tx builder by overriding its ",(0,r.kt)("a",{parentName:"p",href:"https://scrypt.io/scrypt-ts/how-to-write-a-contract/built-ins#builddeploytransaction"},"buildDeployTransaction")," method. An example is shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class DemoContract extends SmartContract {\n  // ...\n\n  // customize the deployment tx by overriding `SmartContract.buildDeployTransaction` method\n  override async buildDeployTransaction(utxos: UTXO[], amount: number, changeAddress?: bsv.Address | string): Promise<bsv.Transaction> {\n    const deployTx = new bsv.Transaction()\n      // add p2pkh inputs for paying tx fees\n      .from(utxos)\n      // add contract output\n      .addOutput(new bsv.Transaction.Output({\n        script: this.lockingScript,\n        satoshis: amount,\n      }))\n      // add OP_RETURN output\n      .addData('Hello World');\n\n    if (changeAddress) {\n      deployTx.change(changeAddress);\n      if (this._provider) {\n        deployTx.feePerKb(await this.provider.getFeePerKb());\n      }\n    }\n\n    return deployTx;\n  }\n}\n")),(0,r.kt)("p",null,"You may visit the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sCrypt-Inc/scryptTS-examples/blob/cf3ea45a11/src/contracts/auction.ts#L100-L127"},"full code")," for more details."),(0,r.kt)("h2",{id:"call-tx"},"Call Tx"),(0,r.kt)("h3",{id:"default-1"},"Default"),(0,r.kt)("p",null,"For contract calls, the default tx builder creates a transaction with the following structure:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Inputs"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"[0]",": The input that spends the contract UTXO."),(0,r.kt)("li",{parentName:"ul"},"[1\u2026]",": Zero or more P2PKH inputs for paying transaction fees."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Outputs"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"[0\u2026N-1]",": One or more outputs, each containing a new contract instance (UTXO) if the contract is ",(0,r.kt)("a",{parentName:"li",href:"./how-to-write-a-contract/stateful-contract"},"stateful"),"."),(0,r.kt)("li",{parentName:"ul"},"[N]",": A P2PKH change output if needed.")))),(0,r.kt)("h3",{id:"customize-1"},"Customize"),(0,r.kt)("p",null,"You can customize a tx builder for a public ",(0,r.kt)("inlineCode",{parentName:"p"},"@method")," of your contract by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"bindTxBuilder"),". The first parameter is the public method name, and the second parameter is the customized tx builder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// bind a customized tx builder for the public method `MyContract.unlock`\ninstance.bindTxBuilder("unlock", (options: MethodCallOptions<T>, ...args: any) => { \n\n  let result: Promise<ContractTransaction<MyContract>>;\n\n  // the contract instance\n  const current = options.current;\n\n  // the tx is NOT signed\n  const unsignedTx: bsv.Transaction = new bsv.Transaction()\n    // add contract input\n    .addInput(current.buildContractInput(options.fromUTXO))\n    // add a p2pkh output\n    .addOutput(new bsv.Transaction.Output({\n        script: bsv.Script.fromHex(Utils.buildPublicKeyHashScript(args[0])),\n        satoshis: args[1]\n    }))\n    // add change output\n    .change(options.changeAddress);\n\n  result = {\n    tx: unsignedTx,\n    atInputIndex: 0 // the contract input\'s index\n  };\n\n  return Promise.resolve(result)         \n})\n')),(0,r.kt)("p",null,"Note that the parameters of your customized tx builder consist of two parts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options")," is of type ",(0,r.kt)("a",{parentName:"li",href:"/how-to-test-a-contract#methodcalloptions"},(0,r.kt)("inlineCode",{parentName:"a"},"MethodCallOptions")),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"...args: any")," is an argument list the same as the bound pubic ",(0,r.kt)("inlineCode",{parentName:"li"},"@method"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"instance.bindTxBuilder('bid', Auction.buildTxForBid)\n\nclass Auction extends SmartContract {\n  // ...\n\n  @method(SigHash.ALL)\n  public bid(bidder: PubKeyHash, bid: bigint) {\n    // ...\n  }\n\n  static buildTxForBid(\n    options: MethodCallOptions<Auction>,\n    // the following arguments are the same as the bound public `@method`\n    bidder: PubKeyHash,\n    bid: bigint\n  ): Promise<ContractTransaction> {\n    // ...\n  }\n}\n")),(0,r.kt)("p",null,"You may visit the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sCrypt-Inc/scryptTS-examples/blob/cf3ea45a11/src/contracts/auction.ts#L129-L178"},"full code")," for more details."),(0,r.kt)("h2",{id:"notes"},"Notes"),(0,r.kt)("p",null,"Please be aware that each of these tx builders should only create an ",(0,r.kt)("strong",{parentName:"p"},"unsigned")," transaction. You need to sign it later if necessary before broadcasting."),(0,r.kt)("p",null,"Also, your customized tx must satisfy all of the called ",(0,r.kt)("inlineCode",{parentName:"p"},"@method"),"'s assertions."))}p.isMDXComponent=!0}}]);