"use strict";(self.webpackChunkscrypt_docs=self.webpackChunkscrypt_docs||[]).push([[8e3],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,P=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(P,a(a({ref:t},l),{},{components:n})):r.createElement(P,a({ref:t},l))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1689:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:6},a="How To Override Methods Compiled Code",s={unversionedId:"advanced/inline-asm",id:"advanced/inline-asm",title:"How To Override Methods Compiled Code",description:"In some rare cases you might want to use low level Bitcoin script to write a smart contracts method. This is usually done for optimization of the scrip size.",source:"@site/docs/advanced/inline-asm.md",sourceDirName:"advanced",slug:"/advanced/inline-asm",permalink:"/advanced/inline-asm",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"How to Integrate sCrypt Service",permalink:"/advanced/how-to-integrate-scrypt-service"},next:{title:"Tutorials",permalink:"/category/tutorials"}},c={},p=[],l={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"how-to-override-methods-compiled-code"},"How To Override Methods Compiled Code"),(0,i.kt)("p",null,"In some rare cases you might want to use low level Bitcoin script to write a smart contracts method. This is usually done for optimization of the scrip size.\nTo achieve this currently, you have to edit the transpiled ",(0,i.kt)("inlineCode",{parentName:"p"},".scrypt")," files under your projects artifacts directory."),(0,i.kt)("p",null,"To make this a bit easier, you can re-use the code inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"optimizations/")," directory in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/sCrypt-Inc/scrypt-ts-lib/tree/master/optimizations"},(0,i.kt)("inlineCode",{parentName:"a"},"scrypt-ts-lib")),"."),(0,i.kt)("p",null,"Inside this directory, there is a shell script named ",(0,i.kt)("inlineCode",{parentName:"p"},"apply_asm_optim.sh"),". In this script, you can specify the source files where substitution with a custom bitcoin script should occur."),(0,i.kt)("p",null,"Let's take a quick look at how this is applied in ",(0,i.kt)("inlineCode",{parentName:"p"},"scrypt-ts-lib")," for three source files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"# BN256\napply artifacts/src/ec/bn256.scrypt optimizations/ec/bn256\n\n# SECP256K1\napply artifacts/src/ec/secp256k1.scrypt optimizations/ec/secp256k1\n\n# SECP256R1\napply artifacts/src/ec/secp256r1.scrypt optimizations/ec/secp256r1\n")),(0,i.kt)("p",null,"For instance, let's consider the content of ",(0,i.kt)("inlineCode",{parentName:"p"},"optimizations/ec/bn256"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"_addCurvePoints.asm\ndoubleCurvePoint.asm\nlineFuncAdd.asm\nlineFuncDouble.asm\nmodInverseBranchlessP.asm\nmulFQ12.asm\nmulLine.asm\nsquareFQ12.asm\n")),(0,i.kt)("p",null,"The name of each file corresponds to a function in the specified ",(0,i.kt)("inlineCode",{parentName:"p"},".scrypt")," source file (",(0,i.kt)("inlineCode",{parentName:"p"},"bn256.scrypt")," for this example). The files contain the actual bitcoin script in ASM format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"OP_3 OP_PICK 11 OP_PICK OP_MUL 12 OP_PICK OP_4 OP_PICK OP_MUL OP_ADD OP_3 OP_PICK 12 OP_PICK OP_MUL OP_5 OP_PICK 14 OP_PICK OP_MUL OP_SUB OP_7 OP_PICK 11 OP_PICK OP_MUL 12 OP_PICK OP_8 OP_PICK OP_MUL OP_ADD OP_7 OP_PICK 12 OP_PICK OP_MUL OP_9 OP_PICK 14 OP_PICK OP_MUL OP_SUB OP_3 OP_ROLL OP_ROT OP_ADD OP_ROT OP_ROT OP_ADD OP_4 OP_PICK 11 OP_PICK 13 OP_PICK OP_8 OP_PICK OP_DUP OP_3 OP_PICK OP_MUL OP_2 OP_PICK OP_5 OP_PICK OP_MUL OP_ADD OP_SWAP OP_ROT OP_MUL OP_3 OP_ROLL OP_3 ...\n")),(0,i.kt)("p",null,"Please note that it is crucial to run ",(0,i.kt)("inlineCode",{parentName:"p"},"apply_asm_optim.sh")," after each project build. To make this process more convenient, you can modify the build script in ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n    "build": "tsc && npm run apply-optim",\n    "apply-optim": "sh optimizations/apply_asm_optim.sh",\n    ...\n')),(0,i.kt)("p",null,"Now, after every build, the script optimizations will be applied."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Please bear in mind that modifying the contract's script code may cause inconsistencies between the on-chain and local execution (methods TS code) behavior. Once you modify the Bitcoin script, it is your responsibility to keep the two versions functionally equivalent.")))}u.isMDXComponent=!0}}]);