"use strict";(self.webpackChunkscrypt_docs=self.webpackChunkscrypt_docs||[]).push([[6672],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>y});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var l=r.createContext({}),s=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},p=function(t){var e=s(t.components);return r.createElement(l.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,l=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),u=s(n),y=o,m=u["".concat(l,".").concat(y)]||u[y]||d[y]||a;return n?r.createElement(m,c(c({ref:e},p),{},{components:n})):r.createElement(m,c({ref:e},p))}));function y(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,c=new Array(a);c[0]=u;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i.mdxType="string"==typeof t?t:o,c[1]=i;for(var s=2;s<a;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9571:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:5},c="How to Integrate sCrypt Service",i={unversionedId:"advanced/how-to-integrate-scrypt-service",id:"advanced/how-to-integrate-scrypt-service",title:"How to Integrate sCrypt Service",description:"Before interacting with the sCrypt contract, we must create a contract instance representing the latest state of the contract on the chain. According to this section, calling the fromTx method can recover such an instance. This works, but not good enough, because you still need to track and record all the contract-related transactions.",source:"@site/docs/advanced/how-to-integrate-scrypt-service.md",sourceDirName:"advanced",slug:"/advanced/how-to-integrate-scrypt-service",permalink:"/docs/advanced/how-to-integrate-scrypt-service",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"How to Debug ScriptContext Failure",permalink:"/docs/advanced/how-to-debug-scriptcontext"},next:{title:"Tutorials",permalink:"/docs/category/tutorials"}},l={},s=[{value:"Initialize sCrypt Client",id:"initialize-scrypt-client",level:2},{value:"Connect <code>ScryptProvider</code> with your signer",id:"connect-scryptprovider-with-your-signer",level:2},{value:"Contract Deployment",id:"contract-deployment",level:2},{value:"Contract Interacting",id:"contract-interacting",level:2}],p={toc:s};function d(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-to-integrate-scrypt-service"},"How to Integrate sCrypt Service"),(0,o.kt)("p",null,"Before interacting with the ",(0,o.kt)("inlineCode",{parentName:"p"},"sCrypt")," contract, we must create a contract instance representing the latest state of the contract on the chain. According to ",(0,o.kt)("a",{parentName:"p",href:"/docs/how-to-deploy-and-call-a-contract/#create-a-smart-contract-instance-from-a-transaction"},"this")," section, calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"fromTx")," method can recover such an instance. This works, but not good enough, because you still need to track and record all the contract-related transactions."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"sCrypt")," service will do this part of the work for you, the only thing you have to do is to integrate it."),(0,o.kt)("h2",{id:"initialize-scrypt-client"},"Initialize sCrypt Client"),(0,o.kt)("p",null,"Passing your own API key and network to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Scrypt.init")," function to initialize the sCrypt client. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Scrypt } from 'scrypt-ts'\n\nScrypt.init({\n  apiKey: 'YOUR_API_KEY',\n  network: 'testnet',\n})\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"For now, you can use the test key ",(0,o.kt)("inlineCode",{parentName:"p"},"alpha_test_api_key")," on testnet.")),(0,o.kt)("h2",{id:"connect-scryptprovider-with-your-signer"},"Connect ",(0,o.kt)("inlineCode",{parentName:"h2"},"ScryptProvider")," with your signer"),(0,o.kt)("p",null,"Initializing the ",(0,o.kt)("inlineCode",{parentName:"p"},"ScryptProvider")," with your own API key and then connect signer to ",(0,o.kt)("inlineCode",{parentName:"p"},"ScryptProvider"),". "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const signer = new TestWallet(myPrivateKey)\nawait signer.connect(new ScryptProvider())\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"It's ",(0,o.kt)("strong",{parentName:"p"},"required")," to use ",(0,o.kt)("inlineCode",{parentName:"p"},"ScryptProvider")," if you want to integrate sCrypt service.")),(0,o.kt)("h2",{id:"contract-deployment"},"Contract Deployment"),(0,o.kt)("p",null,"To deploy the contract, you can refer to this ",(0,o.kt)("a",{parentName:"p",href:"/docs/how-to-deploy-and-call-a-contract/#contract-deployment"},"guide"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const demo = new Demo(1n, 2n)\n// connect signer\nawait demo.connect(signer)\n\nconst balance = 1\nconst deployTx = await demo.deploy(balance)\nconsole.log('contract Voting deployed: ', deployTx.id)\n\nconst contractId = {\n    /** The deployment transaction id */\n    txId: deployTx.id,\n    /** The output index */\n    outputIndex: 0,\n}\n")),(0,o.kt)("p",null,"After the deployment, you can use the outpoint of the deployment tx to track your contract instance."),(0,o.kt)("h2",{id:"contract-interacting"},"Contract Interacting"),(0,o.kt)("p",null,"Before interacting with the contract, you need to create a contract instance with the ",(0,o.kt)("inlineCode",{parentName:"p"},"contractId"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const currentInstance = await Scrypt.contractApi.getLatestInstance(\n  Demo,\n  contractId\n)\n\n// connect signer\nawait currentInstance.connect(signer)\n")),(0,o.kt)("p",null,"With the contract instance, you can read its properties."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"console.log(demo.x)\nconsole.log(demo.y)\n")),(0,o.kt)("p",null,"Or call the contract public methods according to this ",(0,o.kt)("a",{parentName:"p",href:"/docs/how-to-deploy-and-call-a-contract/#contract-call"},"guide"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// call the method of current instance to apply the updates on chain\nconst { tx } = await currentInstance.methods.add(3n)\n\nconsole.log(`Demo contract called,  tx: ${tx.id}`)\n")))}d.isMDXComponent=!0}}]);