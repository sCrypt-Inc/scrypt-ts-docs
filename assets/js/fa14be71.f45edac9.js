"use strict";(self.webpackChunkscrypt_docs=self.webpackChunkscrypt_docs||[]).push([[6279],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>h});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=r.createContext({}),c=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},d=function(t){var e=c(t.components);return r.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,l=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),u=c(n),h=a,m=u["".concat(l,".").concat(h)]||u[h]||p[h]||i;return n?r.createElement(m,s(s({ref:e},d),{},{components:n})):r.createElement(m,s({ref:e},d))}));function h(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=t,o.mdxType="string"==typeof t?t:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9091:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:11},s="Tutorial 11: Ordinal Lock",o={unversionedId:"tutorials/ordinal-lock",id:"tutorials/ordinal-lock",title:"Tutorial 11: Ordinal Lock",description:"Overview",source:"@site/docs/tutorials/ordinal-lock.md",sourceDirName:"tutorials",slug:"/tutorials/ordinal-lock",permalink:"/tutorials/ordinal-lock",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Tutorial 10: Mint BSV20 V1 Token",permalink:"/tutorials/mint-bsv20-v1"},next:{title:"The Official sCrypt 1Sat Ordinals SDK",permalink:"/tokens/"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Contract",id:"contract",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Methods",id:"methods",level:3},{value:"Frontend",id:"frontend",level:2},{value:"Setup Project",id:"setup-project",level:3},{value:"Install the sCrypt SDK",id:"install-the-scrypt-sdk",level:3},{value:"Compile Contract",id:"compile-contract",level:3},{value:"Load Contract Artifact",id:"load-contract-artifact",level:3},{value:"Connect Signer to <code>OrdiProvider</code>",id:"connect-signer-to-ordiprovider",level:3},{value:"Integrate Wallet",id:"integrate-wallet",level:3},{value:"Load Ordinals",id:"load-ordinals",level:3},{value:"List an Ordinal",id:"list-an-ordinal",level:3},{value:"Buy an Ordinal",id:"buy-an-ordinal",level:3},{value:"Conclusion",id:"conclusion",level:2}],d={toc:c};function p(t){let{components:e,...i}=t;return(0,a.kt)("wrapper",(0,r.Z)({},d,i,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tutorial-11-ordinal-lock"},"Tutorial 11: Ordinal Lock"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"In this tutorial, we will go over how to use ",(0,a.kt)("a",{parentName:"p",href:"https://scrypt.io/"},"sCrypt")," to build a full-stack dApp on Bitcoin to sell ",(0,a.kt)("a",{parentName:"p",href:"https://docs.1satordinals.com/"},"1Sat Ordinals"),", including the smart contract and an interactive front-end."),(0,a.kt)("h2",{id:"contract"},"Contract"),(0,a.kt)("p",null,"The contract ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/sCrypt-Inc/scrypt-ord/blob/master/tests/contracts/ordinalLock.ts"},"OrdinalLock")," allows an ordinal to be offered up for sale on a decentralized marketplace. These listings can be purchased by anyone who is able to pay the requested price. Listings can also be cancelled by the person who listed them."),(0,a.kt)("p",null,"To record the seller and price, we need to add two properties to the contract."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export class OrdinalLock extends OrdinalNFT {\n    @prop()\n    seller: PubKey\n\n    @prop()\n    amount: bigint\n    \n    ...\n}\n")),(0,a.kt)("h3",{id:"constructor"},"Constructor"),(0,a.kt)("p",null,"Initialize all the ",(0,a.kt)("inlineCode",{parentName:"p"},"@prop")," properties in the constructor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"constructor(seller: PubKey, amount: bigint) {\n    super()\n    this.init(...arguments)\n    this.seller = seller\n    this.amount = amount\n}\n")),(0,a.kt)("h3",{id:"methods"},"Methods"),(0,a.kt)("p",null,"The public method ",(0,a.kt)("inlineCode",{parentName:"p"},"purchase")," only needs to confine the transaction's outputs to contain:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"transfer ordinal to the buyer"),(0,a.kt)("li",{parentName:"ul"},"payment to the seller")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@method()\npublic purchase(receiver: Addr) {\n    const outputs =\n        Utils.buildAddressOutput(receiver, 1n) + // ordinal to the buyer\n        Utils.buildAddressOutput(hash160(this.seller), this.amount) + // fund to the seller\n        this.buildChangeOutput()\n    assert(this.ctx.hashOutputs == hash256(outputs), 'hashOutputs check failed')\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/sCrypt-Inc/scrypt-ord/blob/master/tests/contracts/ordinalLock.ts"},"final complete code")," is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Addr, prop, method, Utils, hash256, assert, MethodCallOptions, ContractTransaction, bsv, PubKey, hash160 } from 'scrypt-ts'\nimport { OrdinalNFT } from 'scrypt-ord'\n\nexport class OrdinalLock extends OrdinalNFT {\n    @prop()\n    seller: PubKey\n\n    @prop()\n    amount: bigint\n\n    constructor(seller: PubKey, amount: bigint) {\n        super()\n        this.init(...arguments)\n        this.seller = seller\n        this.amount = amount\n    }\n\n    @method()\n    public purchase(receiver: Addr) {\n        const outputs =\n            Utils.buildAddressOutput(receiver, 1n) + // ordinal to the buyer\n            Utils.buildAddressOutput(hash160(this.seller), this.amount) + // fund to the seller\n            this.buildChangeOutput()\n        assert(\n            this.ctx.hashOutputs == hash256(outputs),\n            'hashOutputs check failed'\n        )\n    }\n\n    @method(SigHash.ANYONECANPAY_SINGLE)\n    public cancel(sig: Sig) {\n        assert(this.checkSig(sig, this.seller), 'seller signature check failed')\n        const outputs = Utils.buildAddressOutput(hash160(this.seller), 1n) // ordinal back to the seller\n        assert(\n            this.ctx.hashOutputs == hash256(outputs),\n            'hashOutputs check failed'\n        )\n    }\n\n    static async buildTxForPurchase(\n        current: OrdinalLock,\n        options: MethodCallOptions<OrdinalLock>,\n        receiver: Addr\n    ): Promise<ContractTransaction> {\n        const defaultAddress = await current.signer.getDefaultAddress()\n        const tx = new bsv.Transaction()\n            .addInput(current.buildContractInput())\n            .addOutput(\n                new bsv.Transaction.Output({\n                    script: bsv.Script.fromHex(\n                        Utils.buildAddressScript(receiver)\n                    ),\n                    satoshis: 1,\n                })\n            )\n            .addOutput(\n                new bsv.Transaction.Output({\n                    script: bsv.Script.fromHex(\n                        Utils.buildAddressScript(hash160(current.seller))\n                    ),\n                    satoshis: Number(current.amount),\n                })\n            )\n            .change(options.changeAddress || defaultAddress)\n        return {\n            tx,\n            atInputIndex: 0,\n            nexts: [],\n        }\n    }\n\n    static async buildTxForCancel(\n        current: OrdinalLock,\n        options: MethodCallOptions<OrdinalLock>\n    ): Promise<ContractTransaction> {\n        const defaultAddress = await current.signer.getDefaultAddress()\n        const tx = new bsv.Transaction()\n            .addInput(current.buildContractInput())\n            .addOutput(\n                new bsv.Transaction.Output({\n                    script: bsv.Script.fromHex(\n                        Utils.buildAddressScript(hash160(current.seller))\n                    ),\n                    satoshis: 1,\n                })\n            )\n            .change(options.changeAddress || defaultAddress)\n        return {\n            tx,\n            atInputIndex: 0,\n            nexts: [],\n        }\n    }\n}\n")),(0,a.kt)("p",null,"Note the customized calling method ",(0,a.kt)("inlineCode",{parentName:"p"},"buildTxForPurchase")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"buildTxForCancel")," ensure the ordinal is in the first input and goes to the first output, which is also a 1sat output."),(0,a.kt)("h2",{id:"frontend"},"Frontend"),(0,a.kt)("p",null,"We will add a frontend to the ",(0,a.kt)("inlineCode",{parentName:"p"},"OrdinalLock")," smart contract accroding to this ",(0,a.kt)("a",{parentName:"p",href:"/how-to-integrate-a-frontend/"},"guide"),"."),(0,a.kt)("h3",{id:"setup-project"},"Setup Project"),(0,a.kt)("p",null,"The front-end will be created using ",(0,a.kt)("a",{parentName:"p",href:"https://create-react-app.dev/"},"Create React App"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-react-app ordinal-lock-demo --template typescript\n")),(0,a.kt)("h3",{id:"install-the-scrypt-sdk"},"Install the sCrypt SDK"),(0,a.kt)("p",null,"The sCrypt SDK enables you to easily compile, test, deploy, and call contracts."),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"scrypt-cli")," command line to install the SDK."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd ordinal-lock-demo\nnpm i scrypt-ord\nnpx scrypt-cli init\n")),(0,a.kt)("p",null,"This command will create a contract under ",(0,a.kt)("inlineCode",{parentName:"p"},"src/contracts"),". Replace the file with the contract written ",(0,a.kt)("a",{parentName:"p",href:"#final-code"},"above"),"."),(0,a.kt)("h3",{id:"compile-contract"},"Compile Contract"),(0,a.kt)("p",null,"Compile the contract with the following command: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx scrypt-cli compile\n")),(0,a.kt)("p",null,"This command will generate a contract artifact file under ",(0,a.kt)("inlineCode",{parentName:"p"},"artifacts"),"."),(0,a.kt)("h3",{id:"load-contract-artifact"},"Load Contract Artifact"),(0,a.kt)("p",null,"Before writing the front-end code, we need to load the contract artifact in ",(0,a.kt)("inlineCode",{parentName:"p"},"src/index.tsx"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { OrdinalLock } from './contracts/ordinalLock'\nimport artifact from '../artifacts/ordinalLock.json'\nOrdinalLock.loadArtifact(artifact)\n")),(0,a.kt)("h3",{id:"connect-signer-to-ordiprovider"},"Connect Signer to ",(0,a.kt)("inlineCode",{parentName:"h3"},"OrdiProvider")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const provider = new OrdiProvider();\nconst signer = new SensiletSigner(provider);\n")),(0,a.kt)("h3",{id:"integrate-wallet"},"Integrate Wallet"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"requestAuth")," method of ",(0,a.kt)("inlineCode",{parentName:"p"},"signer")," to request access to the wallet."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// request authentication\nconst { isAuthenticated, error } = await signer.requestAuth();\nif (!isAuthenticated) {\n    // something went wrong, throw an Error with `error` message\n    throw new Error(error);\n}\n\n// authenticated\n// ...\n")),(0,a.kt)("h3",{id:"load-ordinals"},"Load Ordinals"),(0,a.kt)("p",null,"After a user connect wallet, we can get the his address. Call the ",(0,a.kt)("a",{parentName:"p",href:"https://v3.ordinals.gorillapool.io/api/docs/"},"1Sat Ordinals API")," to retrieve ordinals on this address."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"useEffect(() => {\n  loadCollections()\n}, [connectedAddress])\n\nfunction loadCollections() {\n  if (connectedAddress) {\n    const url = `https://v3.ordinals.gorillapool.io/api/txos/address/${connectedAddress.toString()}/unspent?bsv20=false`\n    fetch(url).then(r => r.json()).then(r => r.filter(e => e.origin.data.insc.file.type !== 'application/bsv-20')).then(r => setCollections(r))   }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(7312).Z,width:"2880",height:"1752"})),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(5517).Z,width:"2880",height:"1750"})),(0,a.kt)("h3",{id:"list-an-ordinal"},"List an Ordinal"),(0,a.kt)("p",null,"For each ordinal in the collection list, we can click the ",(0,a.kt)("inlineCode",{parentName:"p"},"Sell")," button to list it after filling in the selling price, in satoshis. Sell an ordinal means we need to create a contract instance, and then transfer the ordinal into it. Afterwards, the ordinal is under the control of the contract, meaning it can be bought by anyone paying the price to the seller."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"async function sell() {\n    const signer = new SensiletSigner(new OrdiProvider())\n    const publicKey = await signer.getDefaultPubKey()\n\n    const instance = new OrdinalLock(PubKey(toHex(publicKey)), amount)\n    await instance.connect(signer)\n\n    const inscriptionUtxo = await parseUtxo(txid, vout)\n    const inscriptionP2PKH = OrdiNFTP2PKH.fromUTXO(inscriptionUtxo)\n    await inscriptionP2PKH.connect(signer)\n\n    const { tx } = await inscriptionP2PKH.methods.unlock(\n        (sigResps) => findSig(sigResps, publicKey),\n        PubKey(toHex(publicKey)),\n        {\n            transfer: instance,     // <---- \n            pubKeyOrAddrToSign: publicKey,\n        } as MethodCallOptions<OrdiNFTP2PKH>\n    )\n}\n")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://lucid.app/publicSegments/view/50527d66-0710-4658-b8db-b615d60232f8/image.png",alt:null})),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(8965).Z,width:"2880",height:"1750"})),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(8375).Z,width:"2880",height:"1750"})),(0,a.kt)("h3",{id:"buy-an-ordinal"},"Buy an Ordinal"),(0,a.kt)("p",null,"To buy an ordinal that is on sale, we only need to call the contract public method ",(0,a.kt)("inlineCode",{parentName:"p"},"purchase"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"async function buy() {\n    const signer = new SensiletSigner(new OrdiProvider())\n    const address = await signer.getDefaultAddress()\n    const { tx } = await instance.methods.purchase(Addr(address.toByteString()))\n}\n")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://lucid.app/publicSegments/view/0b52243b-bdbc-4a13-b5b6-9386be80e155/image.png",alt:null})),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(8099).Z,width:"2880",height:"1750"})),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(8831).Z,width:"2880",height:"1750"})),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(7657).Z,width:"2880",height:"1750"})),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(7083).Z,width:"2880",height:"1750"})),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"Congratulations! You have successfully completed a full-stack dApp that can sell 1Sat Ordinals on Bitcoin."),(0,a.kt)("p",null,"The full example repo can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/sCrypt-Inc/ordinal-lock-demo/tree/sensilet"},"here"),"."))}p.isMDXComponent=!0},8099:(t,e,n)=>{n.d(e,{Z:()=>r});const r=n.p+"assets/images/buy1-0cca34ece542fab6f2681485fd602e1b.png"},8831:(t,e,n)=>{n.d(e,{Z:()=>r});const r=n.p+"assets/images/buy2-520cf27a5dc308e0f6823f61a1844e08.png"},7657:(t,e,n)=>{n.d(e,{Z:()=>r});const r=n.p+"assets/images/buy3-f25e3059d0ef019132bd634528f7b71c.png"},7083:(t,e,n)=>{n.d(e,{Z:()=>r});const r=n.p+"assets/images/buy4-8d286427b76802c0be1e4fda7cb7217d.png"},7312:(t,e,n)=>{n.d(e,{Z:()=>r});const r=n.p+"assets/images/load1-bb1f4c54b02b4f3179f17b1dff13a847.png"},5517:(t,e,n)=>{n.d(e,{Z:()=>r});const r=n.p+"assets/images/load2-56db013c94c63eefd6a7840ea119b580.png"},8965:(t,e,n)=>{n.d(e,{Z:()=>r});const r=n.p+"assets/images/sell1-05b4faee211f41647fecb4b83e4c98f2.png"},8375:(t,e,n)=>{n.d(e,{Z:()=>r});const r=n.p+"assets/images/sell2-3bac875c5790de2b6997a7139621c6b7.png"}}]);