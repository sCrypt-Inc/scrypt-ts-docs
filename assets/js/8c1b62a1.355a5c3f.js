"use strict";(self.webpackChunkscrypt_docs=self.webpackChunkscrypt_docs||[]).push([[55],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),l=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),g=r,h=d["".concat(p,".").concat(g)]||d[g]||u[g]||a;return n?i.createElement(h,o(o({ref:t},c),{},{components:n})):i.createElement(h,o({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9844:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var i=n(7462),r=(n(7294),n(3905));const a={sidebar_position:10},o="How to Sign P2PKH Inputs Using the Signer Class",s={unversionedId:"advanced/How to only sign p2pkh inputs",id:"advanced/How to only sign p2pkh inputs",title:"How to Sign P2PKH Inputs Using the Signer Class",description:"In certain scenarios, it is necessary to sign only P2PKH inputs when working with transactions in sCrypt. This documentation will guide you through the process of utilizing the Signer class to achieve this.",source:"@site/docs/advanced/How to only sign p2pkh inputs.md",sourceDirName:"advanced",slug:"/advanced/How to only sign p2pkh inputs",permalink:"/advanced/How to only sign p2pkh inputs",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Time Lock",permalink:"/advanced/timeLock"},next:{title:"How to Replay a Contract Instance to the Latest State",permalink:"/advanced/how-to-replay-instance"}},p={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Implementation",id:"implementation",level:2},{value:"1. Initialize a UTXO for P2PKH",id:"1-initialize-a-utxo-for-p2pkh",level:3},{value:"2. Add the P2PKH UTXO to the Transaction",id:"2-add-the-p2pkh-utxo-to-the-transaction",level:3},{value:"3. Verify Input Script Before Signing",id:"3-verify-input-script-before-signing",level:3},{value:"4. Sign the Transaction",id:"4-sign-the-transaction",level:3},{value:"5. Verify Input Script After Signing",id:"5-verify-input-script-after-signing",level:3},{value:"Example Implementation",id:"example-implementation",level:3},{value:"Conclusion",id:"conclusion",level:2}],c={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-sign-p2pkh-inputs-using-the-signer-class"},"How to Sign P2PKH Inputs Using the Signer Class"),(0,r.kt)("p",null,"In certain scenarios, it is necessary to sign only P2PKH inputs when working with transactions in sCrypt. This documentation will guide you through the process of utilizing the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Signer"))," class to achieve this."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Before proceeding, make sure you have a basic understanding of the sCrypt. library and have set up the required dependencies."),(0,r.kt)("h2",{id:"implementation"},"Implementation"),(0,r.kt)("h3",{id:"1-initialize-a-utxo-for-p2pkh"},"1. Initialize a UTXO for P2PKH"),(0,r.kt)("p",null,"Start by defining a P2PKH Unspent Transaction Output (UTXO) that you intend to use for your transaction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const utxo = {\n    txId: '5260b12348608a33c2ac90ed8a08e0b3eb90bbe862bcea6b21b1f29f1c2fdee0',\n    outputIndex: 0,\n    script: bsv.Script.fromASM('OP_DUP OP_HASH160 af838fed6517e595e6761c2b96849bec473b00f8 OP_EQUALVERIFY OP_CHECKSIG').toHex(),\n    satoshis: 1000,\n};\n")),(0,r.kt)("h3",{id:"2-add-the-p2pkh-utxo-to-the-transaction"},"2. Add the P2PKH UTXO to the Transaction"),(0,r.kt)("p",null,"Use the from() method to add the P2PKH UTXO to your transaction. This marks the input as a P2PKH input:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"tx.from(utxo);\n")),(0,r.kt)("h3",{id:"3-verify-input-script-before-signing"},"3. Verify Input Script Before Signing"),(0,r.kt)("p",null,"Before signing the transaction, ensure that the input script is empty. This can be done with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"console.log(tx.inputs[2].script.toASM()); // Empty, no signature\n")),(0,r.kt)("h3",{id:"4-sign-the-transaction"},"4. Sign the Transaction"),(0,r.kt)("p",null,"Use the Signer class to sign the transaction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const signer = getDefaultSigner();\nawait signer.signTransaction(tx);\n")),(0,r.kt)("h3",{id:"5-verify-input-script-after-signing"},"5. Verify Input Script After Signing"),(0,r.kt)("p",null,"After signing, confirm that the input script now contains the signature and public key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"console.log(tx.inputs[2].script.toASM()); // Should contain signature and pubkey\n")),(0,r.kt)("h3",{id:"example-implementation"},"Example Implementation"),(0,r.kt)("p",null,"Here is a simplified example demonstrating the steps above within a transaction :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const tx = new bsv.Transaction();\n// Add inputs, outputs, and other transaction details as needed\n\n// Add P2PKH UTXO\ntx.from(utxo);\n\n// Verify input script before signing\nconsole.log(tx.inputs[2].script.toASM()); // Empty, no signature\n\n// Sign the transaction\nconst signer = getDefaultSigner();\nawait signer.signTransaction(tx);\n\n// Verify input script after signing\nconsole.log(tx.inputs[2].script.toASM()); // Should contain signature and pubkey\n\n.................................\n.................................\n\n// Finalize the transaction\nconst finalizedTx = tx.build();\n")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"By following these steps, your transaction sign only P2PKH inputs using the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Signer"))," class in sCrypt. If you encounter any issues or have specific requirements,\nplease refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://app.slack.com/client/TLSHKFH5Y/CLSHPUZC3"},"sCrypt slack channel")," to seek further assistance."))}u.isMDXComponent=!0}}]);