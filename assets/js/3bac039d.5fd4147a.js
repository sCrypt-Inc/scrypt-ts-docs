"use strict";(self.webpackChunkscrypt_docs=self.webpackChunkscrypt_docs||[]).push([[4734],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(n),h=r,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||i;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9306:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:1},s="Tutorial 1: Inscribe Image",o={unversionedId:"tokens/tutorials/inscribe-image",id:"tokens/tutorials/inscribe-image",title:"Tutorial 1: Inscribe Image",description:"Overview",source:"@site/docs/tokens/tutorials/inscribe-image.md",sourceDirName:"tokens/tutorials",slug:"/tokens/tutorials/inscribe-image",permalink:"/tokens/tutorials/inscribe-image",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorials",permalink:"/category/tutorials"},next:{title:"Tutorial 2: Mint BSV20 V2 Token",permalink:"/tokens/tutorials/mint-bsv20-v2"}},c={},l=[{value:"Overview",id:"overview",level:2},{value:"Contract",id:"contract",level:2},{value:"Inscribe Image",id:"inscribe-image",level:2},{value:"Transfer the Inscription",id:"transfer-the-inscription",level:2},{value:"Step 1. Create Receiver Instance",id:"step-1-create-receiver-instance",level:3},{value:"Step 2. Call the Contract",id:"step-2-call-the-contract",level:3},{value:"Conclusion",id:"conclusion",level:2}],p={toc:l};function d(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tutorial-1-inscribe-image"},"Tutorial 1: Inscribe Image"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"In this tutorial, we will use contract ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sCrypt-Inc/boilerplate/blob/master/src/contracts/hashLock.ts"},"HashLock")," as an example to introduce how to inscribe an image on an ordinal, which is locked in a smart contract. It can be transferred by calling the contract."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Your wallet must be funded before inscribing the image.")),(0,r.kt)("p",null,"First, you install ",(0,r.kt)("inlineCode",{parentName:"p"},"scrypt-ord")," as an dependency in your project."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install scrypt-ord\n")),(0,r.kt)("h2",{id:"contract"},"Contract"),(0,r.kt)("p",null,"The new contract ",(0,r.kt)("inlineCode",{parentName:"p"},"HashLockNFT")," is almost the same as the previous ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sCrypt-Inc/boilerplate/blob/master/src/contracts/hashLock.ts"},"implementation"),", except it must be derived from ",(0,r.kt)("inlineCode",{parentName:"p"},"OrdinalNFT")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"SmartContract"),", which comes with package ",(0,r.kt)("inlineCode",{parentName:"p"},"scrypt-ord"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class HashLockNFT extends OrdinalNFT {\n    ...\n}\n")),(0,r.kt)("p",null,"It also stores a hash value in the contract. It will be unlocked successfully when calling the public method ",(0,r.kt)("inlineCode",{parentName:"p"},"unlock")," with the correct hash preimage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class HashLockNFT extends OrdinalNFT {\n    @prop()\n    hash: Sha256\n    \n    ...\n    \n    @method()\n    public unlock(message: ByteString) {\n        assert(this.hash == sha256(message), 'hashes are not equal')\n    }\n}\n")),(0,r.kt)("p",null,"The base class ",(0,r.kt)("inlineCode",{parentName:"p"},"OrdinalNFT")," encapsulates helper functions to handle ordinals. If you want to create your own contract that control Ordinal NFTs, you must derive from it."),(0,r.kt)("h2",{id:"inscribe-image"},"Inscribe Image"),(0,r.kt)("p",null,"We first create an instance of contract ",(0,r.kt)("inlineCode",{parentName:"p"},"HashLockNFT"),". Next we call ",(0,r.kt)("inlineCode",{parentName:"p"},"inscribeImage")," on the instance to inscribe an image."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// create contract instance\nconst message = toByteString('Hello sCrypt', true)\nconst hash = sha256(message)\nconst hashLock = new HashLockNFT(hash)\n...\n// inscribe image into contract\nconst image = readImage()\nconst mintTx = await hashLock.inscribeImage(image, 'image/png')\n")),(0,r.kt)("p",null,"Execute command ",(0,r.kt)("inlineCode",{parentName:"p"},"npx ts-node tests/examples/inscribeImage.ts")," to run this example."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(1010).Z,width:"1570",height:"186"})),(0,r.kt)("p",null,"Then you can check your inscription on a block explorer."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(1197).Z,width:"1280",height:"800"})),(0,r.kt)("p",null,"Click ",(0,r.kt)("inlineCode",{parentName:"p"},"Decode"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(1925).Z,width:"1268",height:"800"})),(0,r.kt)("p",null,"Now that the inscription is locked to a contract instance, it is controlled by the smart contract, which means it can only be transferred when the hash lock is unlocked."),(0,r.kt)("p",null,"This is different from using a P2PKH address to receive the inscription, where the inscription is controlled by a private key."),(0,r.kt)("h2",{id:"transfer-the-inscription"},"Transfer the Inscription"),(0,r.kt)("p",null,"The contract instance holds the inscription and we transfer it to a bitcoin address."),(0,r.kt)("h3",{id:"step-1-create-receiver-instance"},"Step 1. Create Receiver Instance"),(0,r.kt)("p",null,"Class ",(0,r.kt)("inlineCode",{parentName:"p"},"OrdiNFTP2PKH")," represents an address that can hold inscriptions. Its constructor takes one parameter which is the receiving address."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const receiver = new OrdiNFTP2PKH(Addr(address.toByteString()))\n")),(0,r.kt)("h3",{id:"step-2-call-the-contract"},"Step 2. Call the Contract"),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("a",{parentName:"p",href:"/how-to-deploy-and-call-a-contract/#contract-call"},"contract calling")," before, we call the ",(0,r.kt)("inlineCode",{parentName:"p"},"unlock")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"HashLockNFT")," as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const { tx: transferTx } = await hashLock.methods.unlock(\n    message,\n    {\n        transfer: receiver,  // <-----\n    } as OrdiMethodCallOptions<HashLockNFT>\n)\n")),(0,r.kt)("p",null,"We pass the receiver instance to ",(0,r.kt)("inlineCode",{parentName:"p"},"transfer")," of struct ",(0,r.kt)("inlineCode",{parentName:"p"},"OrdiMethodCallOptions"),"."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"Great! You have finished the tutorial on how to inscribe and transfer a 1Sat Ordinal with a smart contract."),(0,r.kt)("p",null,"The full complete ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sCrypt-Inc/scrypt-ord/blob/master/tests/contracts/hashLockNFT.ts"},"contract")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sCrypt-Inc/scrypt-ord/blob/master/tests/examples/inscribeImage.ts"},"example")," can be found in sCrypt's ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sCrypt-Inc/scrypt-ord"},"repository"),"."))}d.isMDXComponent=!0},1925:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/decoded-inscribed-image-5f098df5f0080657327f790c13f1b5c9.png"},1010:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/inscribe-image-c8917a4ed68568fe18a0189f0ea9bcd2.png"},1197:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/inscribed-tx-ca9f73d08a3b16e1354d443b57e3adb2.png"}}]);