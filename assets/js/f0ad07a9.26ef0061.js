"use strict";(self.webpackChunkscrypt_docs=self.webpackChunkscrypt_docs||[]).push([[9517],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,h=d["".concat(s,".").concat(u)]||d[u]||f[u]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8267:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:11},i="How to Verify a Contract",c={unversionedId:"how-to-verify-a-contract",id:"how-to-verify-a-contract",title:"How to Verify a Contract",description:"You will learn how to verify smart contracts on WhatsOnChain (WoC), a blockchain explorer.",source:"@site/docs/how-to-verify-a-contract.md",sourceDirName:".",slug:"/how-to-verify-a-contract",permalink:"/docs/how-to-verify-a-contract",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"How to Publish a Contract to NPM",permalink:"/docs/how-to-publish-a-contract"},next:{title:"Advanced",permalink:"/docs/category/advanced"}},s={},l=[{value:"1. Using WOC sCrypt Plugin",id:"1-using-woc-scrypt-plugin",level:2},{value:"2. Using CLI",id:"2-using-cli",level:2}],p={toc:l};function f(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-verify-a-contract"},"How to Verify a Contract"),(0,r.kt)("p",null,"You will learn how to verify smart contracts on ",(0,r.kt)("a",{parentName:"p",href:"https://whatsonchain.com/"},"WhatsOnChain")," (WoC), a blockchain explorer.\nBy verifying your smart contract on WoC, anyone can view its source code and interact with it confidently. Let's get started!"),(0,r.kt)("p",null,"To start with the verification process, we need to first deploy a smart contract. Let us use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorials/hello-world"},'"Hello World" tutorial')," as an example. After you complete the tutorial, you should get the ID of the deployment transaction such as ",(0,r.kt)("a",{parentName:"p",href:"https://test.whatsonchain.com/tx/a34d4e45a9108b5b9da4faf4f086e9ef36b79466383bd7a22ff2c7f6a562546c"},(0,r.kt)("inlineCode",{parentName:"a"},"a34d4e45a9108b5b9da4faf4f086e9ef36b79466383bd7a22ff2c7f6a562546c")),"."),(0,r.kt)("p",null,"If you take a look at the transaction on WoC, you'll see that the first output contains a script identified by the hash ",(0,r.kt)("inlineCode",{parentName:"p"},"eb2f10b8f1bd12527f07a5d05b40f06137cbebe4e9ecfb6a4e0fd8a3437e1def"),", which contains your contract in script format."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(1719).Z,width:"968",height:"790"})),(0,r.kt)("p",null,"You can submit and verify sCrypt source code that compiles to it."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(2874).Z,width:"1928",height:"738"})),(0,r.kt)("p",null,"There are two ways to verify it."),(0,r.kt)("h2",{id:"1-using-woc-scrypt-plugin"},"1. Using WOC sCrypt Plugin"),(0,r.kt)("p",null,"At the deployed transaction on WOC, click on the ",(0,r.kt)("inlineCode",{parentName:"p"},"ScriptHash")," of the first output. It will open a page like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(2464).Z,width:"923",height:"590"})),(0,r.kt)("p",null,"You shall see an ",(0,r.kt)("inlineCode",{parentName:"p"},"sCrypt")," tab. Click on it. You'll see a very simple form:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(5598).Z,width:"874",height:"408"})),(0,r.kt)("p",null,"In the form you are able to select the version of sCrypt you've used to compile and deploy the contract, along with a text-box in which you need to paste the source code."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(8522).Z,width:"879",height:"614"})),(0,r.kt)("p",null,"Now click ",(0,r.kt)("inlineCode",{parentName:"p"},"Submit"),". If the code is correct, you should see something like the following in a few seconds:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(1135).Z,width:"864",height:"935"})),(0,r.kt)("p",null,"Congrats, you have verified your first smart contract!"),(0,r.kt)("p",null,"Now, every time someone opens the ",(0,r.kt)("inlineCode",{parentName:"p"},"sCrypt")," tab on ",(0,r.kt)("a",{parentName:"p",href:"https://test.whatsonchain.com/script/eb2f10b8f1bd12527f07a5d05b40f06137cbebe4e9ecfb6a4e0fd8a3437e1def"},"the script hash page"),", they will see the verified smart contract source code, as well as its constructor parameters when deployed."),(0,r.kt)("h2",{id:"2-using-cli"},"2. Using CLI"),(0,r.kt)("p",null,"The same process can be done using the ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/scrypt-cli"},"sCrypt CLI"),".\nYou can verify the deployed smart contracts script using the ",(0,r.kt)("inlineCode",{parentName:"p"},"verify")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"scrypt verify <scriptHash> <contractPath>\n")),(0,r.kt)("p",null,"The first positional argument is the script hash of the deployed contract and the second one is the path to the file which contains the sCrypt smart contract. Note, that the file must also include all the code it depends on, i.e. third party libraries."),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"network")," option, you can specify on which network the contract is deployed. This defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"test"),", indicating the Bitcoin testnet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"scrypt verify --network main <scriptHash> <contractPath>\n")),(0,r.kt)("p",null,"You can also specify the version of sCrypt used during verification. By default, the command will use the version specified in ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"scrypt verify -V 0.2.0-beta.9 <scriptHash> <contractPath>\n")),(0,r.kt)("p",null,"For example, if we would like to verify the same deployed contract as above, we would simply run the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"scrypt verify eb2f10b8f1bd12527f07a5d05b40f06137cbebe4e9ecfb6a4e0fd8a3437e1def src/contracts/demoproject.ts\n")),(0,r.kt)("p",null,"Upon execution, the designated contract code undergoes verification on sCrypt's servers. If successful, the outcome will be ",(0,r.kt)("a",{parentName:"p",href:"https://test.whatsonchain.com/script/eb2f10b8f1bd12527f07a5d05b40f06137cbebe4e9ecfb6a4e0fd8a3437e1def"},"displayed on WoC"),', under the "sCrypt" tab, just like above.'))}f.isMDXComponent=!0},2874:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verify-diagram-df9c8d1cde78abc16187496a3df9de70.webp"},2464:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verify-scripthash-77906ebb8a446ccbadfae9dbbb65e291.png"},8522:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verify-submit-filled-b7facc86ff6e8901486b7fce8158004a.png"},5598:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verify-submit-463b3f3bff047e974a6945f04e2d5fc2.png"},1719:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verify-tx-out-e9b3bcaf241e25aaf9016d956126c3e6.png"},1135:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verify-verified-code-e54e31abaaad526a4c5355797628f2c6.png"}}]);